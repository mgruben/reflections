How is the staging area different from the working directory and the repository? What value do you think it offers?
The working directory contains all files and folders associated with that git repository, however the staging area is a "temporary" collection of the files and folders which are associated with the next logical commit.

How can you use the staging area to make sure you have one commit per logical change?
git add {all,files,which,are,logically,grouped,in,this,commit}
git commit -m "fix or feature or cleanup"
rinse && repeat

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches denote design architecture differences, perhaps goal differences, or otherwise just philosophical differences which are not easily thought of as steps along the same linear path.  Branches help you to keep track of these divides without forcing you to conceptualize each change as belonging to the same narrative arc.

How do the diagrams help you visualize the branch structure?
By diagramming branches as a departure from the master "alignment," a clear conceptual analogy is drawn to the departure during the development process. Perhaps these branches meet again, or perhaps not, but they are not initially the same logical path.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Yeah, I'm not really clear on that, especially since code continues developing after the branch.  It's supposed to bring together fixes without breaking code.  It's represented as a "merge" because the logical development paths reconnect at a later point in time.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
The only pro seems to be that Git smushes code together for you, which I guess was difficult to do manually?
