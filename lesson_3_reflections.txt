When would you want to use a remote repository rather than keeping all your work local?
The git philosophy is to save (somewhere) whenever a logical quantum of progress has been made.
This philosophy is functional locally, certainly, but storing things only in one place raises the possibility of a hardware or software failure erasing all progress.
Outside of disaster recovery, using a remote repository allows your project to progress agnostically of any single computer, user, development team, nationality, etc.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
For one, you may be in the middle of updating the branch yourself, and an automatic pull would really frustrate that process.  Granted, you should branch off from Master if this is the case, but that's not always feasible.
For another, the remote repo will certainly, even if claimed stable, not have been in use as long as an older (e.g. your local) repo.  That is, if stability is your goal, you may want to let development and bug testing continue on the main branch while you sit back with a known stable branch.  Again, it is common to branch off known-stable releases, but identifying which versions are "stable" is often a matter of aesthetics.
Finally, someone may have purposely or inadvertently broken the branch with their latest commit, and you would want the opportunity to review the commit before pulling to ensure that this isn't the case.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Not every project is derivative, but most of them are.
If you're starting a new project, this project will have a single branch.
When development on the project can be parallelized, a branch is a good way to achieve this.  Now certain functions or files can be updated / changed / tested / experimented on without as much fear of breaking other banked progress.  These branches can be further merged back into a single branch as the respective kinks are worked out.
Cloning happens in several circumstances, usually when someone wants to acquire the code you've contributed to your project.  (Semantically, the project likely didn't start with a clone because it likely started locally.  It didn't have to start locally, it could have started with a clone, but that wasn't necessary.) Cloning can also happen when someone wants to start contributing to an existing project (that is, making their own commits).  They get up to speed on the project by cloning into it.
Forking is a type of cloning which provides automatic attribution, and which doesn't necessarily create a copy of the project on anyone's local machine.  People fork for several reasons, such as (1) to take an existing project (on which they do not have collaboration rights) in a different design direction, (2) to continue development on an abandoned project (also on which they would not, being future-people, have collaboration rights), and (3) as an unofficial branch, which isn't necessarily going in a different design direction than the original repo, but to circumvent the need for collboration rights.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Via face-to-face communication with other humans.  Based on what I'm seeing here, that would be far easier.  However, it scales poorly.  Thus, Git and GitHub seem much better-suited to collaborating in large environments.
